# home

### Introduction
This is a python server and web based javascript duo that allows an experiment to be run using an Arduino microcontroller.


### Web Interface

<IMG SRC="img/screenshot1.png" WIDTH=450 style="border:1px solid gray">

The top section provides an interface to start/stop a trial and plots real-time feedback as the trial is running.

The middle section provides an interface to set stimulus parameters for a trial and to upload these parameters to an Arduino. This section also provides a plot of what the trial will look like based on the set of parameters entered.


### Server Installation

####  Python

Download and install [Anaconda][1]. Anaconda is a [python][2] installation that will install many commonly used libraries. It is much easier to get started with Anaconda rather than a basic installation of Python.

####  Install required python libraries

Install additional required python libraries using the included requirements.txt file

`pip install -r requirements.txt`

Here is the requirements.txt file

```
eventlet>=0.18.4
Flask>=0.10.1
Flask-Markdown>=0.3
Flask-SocketIO>=1.0
platformio>=2.8.5
plotly>=1.9.6
pyserial>=3.0.1
```

### Arduino Setup

####  Upload code to the Arduino

The source code for the Arduino can be found in [/platformio/src/main.cpp][4].

Use the standard Arduino IDE to upload main.cpp to your Arduino. Make sure you have the Arduino libraries installed (see below).

If you prefer you can use [Platformio][5] to do everything from a command line. This has the distinct advantage that you can compile and upload code from a headless computer including a Raspberry Pi or any system running Linux.

Platformio is a python library so you should be good to go with `pip install platformio`. Have a look [here][6] to create a platformio.ini file for your specific Arduino.

Two example platformio.ini configurations

```
[env:uno]
platform = atmelavr
framework = arduino
board = uno

[env:pro16MHzatmega328]
platform = atmelavr
framework = arduino
board = pro16MHzatmega328
```

Once platformio is configured, compile, upload, and clean with

```
platformio run #compile arduino code
platformio run --target upload #compile and upload
platformio run --target clean #clean project

platformio serialports monitor -p /dev/ttyUSB0 -b 115200 #a serial port monitor
```

Specifying the correct serial port for the Arduino is critical. Specify this in the treadmill.py file.

```
##serialStr = '/dev/tty.usbmodem618661' #teensy at work
##serialStr = '/dev/tty.usbmodem618661' #teensy?
##serialStr = '/dev/ttyUSB0' #hand soldered arduino micro (home debian)
##serialStr = '/dev/tty.usbserial-A50285BI' # hand soldered at work
serialStr = '/dev/ttyACM0' #uno
```

####  Hardware

- Arduino Uno

- Stepper Motor, [Sparkfun - 09238][7], $15

- Stepper motor driver, EasyDriver, [Sparkfun - 12779][8], $15. Main website for [EasyDriver][9]

- Rotary encoder, [Honeywell-600-128-CBL][10], [.pdf][11] spec sheet, $37

- IR LED, 840-850 nm, [Sparkfun - 9469][12] $1 each (960 nm IR LEDs do not work well with Pi Noir camera)

- Actobotics at [ServoCity][13] and [Sparkfun][14]. Give [ServoCity][15] a shot, their visual guides and project ideas are really helpful in desining components. This can be your one stop shop for all structural components including frames, rods, bearings, clamps, and motor mounts.

####  Arduino libraries

Key is to use libraries that do not block your main event loop. These are 'non-blocking' and usually written in C.

- [AccelStepper][16] library to control stepper motor

- Rotary encoder library from [PJRC][17]

####  Wiring the arduino

- Wire the stepper motor
- Wire the stepper motor to the stepper motor driver
- Wire the rotary encoder
- Wire the DIO pins to communicate with ScanImage

### Running an experiment

At its core, an experiment is run on the Arduino using [main.cpp][4]. We have provided two additional interfaces: a flask app that serves a webpage and a backend python interface.

####  Flask interface

Running the flask interface with `python treadmill_app.py` will run a flask server and serve a website at `http://192.168.1.200:5000`. You can change the default web address and port in [treadmill_app.py][18].

####  Pure Python interface
You can easily use iPython or any python command interpreter to drive an experiment.

```python
import treadmill
t = treadmill.treadmill() # create a treadmill object
t.startTrial() # start a new trial
t.stopTrial() # stop a trial
t.GetArduinoState() # get the current state with all trial parameters (see Arduino getstate below).
t.settrial('epochDur',5000) # set the value of 'epochDur' trial parameter to 5000 ms
```

The python interface and arduino interface share all trial parameter names. See Arduino section below for a list of all possible trial parameters.

####  Arduino interface

The Arduino program [main.cpp][4] provides a simple serial interface to get and set parameters of a trial and to start and stop a trial. Once the program is uploaded to an Arduino, open your favorite serial port and start entering commands.

```
startTrial # start a trial
stopTrial # stop a trial
getState #
settrial,[name],[value]
```

`settrial` takes the `name` and `value` of a trial parameter to set. The `name` needs to be one of: numPulse, numEpoch, epochDur, preDur, etc. These names match the 'Stimulus' parameters provided in the web interface. See the SetTrial() function in [main.cpp][4] for all possible trial parameters.

Entering `getState` in a serial window and the Arduino will return the current values for all trial parameters. This is also a good way to find the names of trial parameters and then set them like `settrial,epochDur,5000`.

```
=== Arduino State ===
trialNumber=0
trialDur=1000
numEpoch=1
epochDur=1000
preDur=1000
postDur=1000
numPulse=3
pulseDur=1000
useMotor=1
motorDel=200
motorDur=200
motorSpeed=0
motorMaxSpeed=0
versionStr=20160322
=== Done ===
```

####  Rolling your own interface

You can roll your own interface by either interfacing directly with the Arduino code in [main.cpp][4] or the python code in [treadmill.py][19].

### Links

Flask

- [flask-socketio][20]

- [flask-markdown][23]

- [eventlet][21]

Arduino

- [platormio][5]

- [platform io serial port monitor][24]

- [AccelStepper][16]

- [Rotary Encoder][17]


[1]: https://www.continuum.io/why-anaconda
[2]: http://www.python.org/

[3]:https://github.com/cudmore/treadmill/blob/master/requirements.txt
[4]: https://github.com/cudmore/treadmill/blob/master/platformio/src/main.cpp
[5]: http://platformio.org/
[6]: http://docs.platformio.org/en/latest/quickstart.html#initialize-project

[7]: https://www.sparkfun.com/products/9238
[8]: https://www.sparkfun.com/products/12779
[9]: http://www.schmalzhaus.com/EasyDriver/
[10]: http://www.digikey.com/product-detail/en/600128CBL/600CS-ND/53504
[11]: http://sensing.honeywell.com/600%20series_005940-2-en_final_12sep12.pdf
[12]: https://www.sparkfun.com/products/9469
[13]: https://www.servocity.com/html/actoboticstm.html
[14]: https://www.sparkfun.com/actobotics
[15]: https://www.servocity.com/html/actoboticstm.html
[16]: http://www.airspayce.com/mikem/arduino/AccelStepper/classAccelStepper.html
[17]: https://www.pjrc.com/teensy/td_libs_Encoder.html

[18]: https://github.com/cudmore/treadmill/blob/master/treadmill_app.py
[19]: https://github.com/cudmore/treadmill/blob/master/treadmill.py

[20]: https://flask-socketio.readthedocs.org/en/latest/
[21]: http://eventlet.net/
[22]: https://pythonhosted.org/pyserial/shortintro.html
[23]: https://pythonhosted.org/Flask-Markdown/
[24]: http://docs.platformio.org/en/latest/userguide/cmd_serialports.html#platformio-serialports-monitor

# about

treadmill was created by [Robert H Cudmore][1].

### Development

#### mkDocs

This documentation is written in markdown and a static site is generated with [mkDocs][25] using the [Cinder][26] theme. Previously I have used Jekyll which is amazing. Going with mkDocs to see if a simple site is acceptable.

When writing markdown, serve a mkDocs site locally with

```
cd docs/
mkdocs serve --dev-addr=0.0.0.0:8000 # serves built site on LAN IP
mkdocs serve # serves built site on localhost at 127.0.0.1:8000

mkdocs build #generates the site into docs/site/
```

Deploy to github gh-pages by follow for [deployment instructions][27].

`mkdocs gh-deploy` will use the gh-pages branch of repository specified in `mkdocs.yml`

```
## this will deploy to github gh-pages specified in mkdocs.yml
cd docs #should have mkdocs.yml file
mkdocs gh-deploy --clean

##site is then available at
http://cudmore.github.io/treadmill
```

#### Tweak Cinder

Use 'pip show mkdocs' to figure out where your cinder files are

>> pip show mkdocs
>> /home/cudmore/anaconda2/lib/python2.7/site-packages


#### Deploy to Github gh-pages

Following the [mkDocs][4] help, deploy to github. Again, I am doing this on OSX. Not doing this on Debian because I do not have git/github properly configured.

>> mkdocs build --clean
>> mkdocs gh-deploy --clean


#### Generate a single PDF from mkDocs site

Use [mkdocs-pandoc][2] to convert the mkdocs site into a single pdf. This creates a table of contents and appends all .md files using [pandoc][3] as a backend.

```
cd docs
mkdocs2pandoc > mydocs.pd
pandoc --toc -f markdown+grid_tables+table_captions -o mydocs.pdf mydocs.pd   # Generate PDF
pandoc --toc -f markdown+grid_tables -t epub -o mydocs.epub mydocs.pd         # Generate EPUB
```

I found it easy to do this on OSX using the pandoc installer. I did not get this working on Debian.

[1]: http://robertcudmore.org
[2]: https://github.com/jgrassler/mkdocs-pandoc
[3]: http://pandoc.org
[4]: http://www.mkdocs.org/user-guide/deploying-your-docs/
[25]: http://www.mkdocs.org
[26]: http://sourcefoundry.org/cinder/
[27]: https://mkdocs.readthedocs.org/en/stable/user-guide/deploying-your-docs/

