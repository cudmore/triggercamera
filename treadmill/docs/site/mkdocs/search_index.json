{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nThis is documentation for controlling a behavioral experiment using an Arduino microcontroller using Python. The experiment can be controlled from a Python command line or with an easy to use web browser interface. Included in this system is an option to simultaneously record video using a Rapsberry Pi video camera. Our goal is to provide a starting point for open-source behavioral experiments that can be extended to new experimental designs.\n\n\n\n\n\n\nFigure 1. Web-browser interface.\n\n\nThe top section provides an interface to start/stop a trial and plots real-time feedback as the trial is running.\n\n\nThe \nStimulus\n section provides an interface to set stimulus parameters for a trial and to upload these parameters to an Arduino. This section also provides a plot of what the trial will look like based on the set of stimulus parameters entered (this plot is not shown in this example).\n\n\n\n\nSystem design\n\n\nThe core system consists of an Arduino, a stepper motor and motor driver, and a rotary encoder. The system comes together with a circular \ntreadmill\n that can be driven by the stepper motor. Finally, the position of the treadmill is recorded with the rotary encoder.\n\n\nThe Arduino can be controlled with serial commands and can be triggered with general purpose digital input-output (GPIO) pulses. By relying on serial commands and GPIO pulses, this system is not dependent on the details of other pieces of equipment already in place for an experiment and can be extended to new and unique experimental configurations.\n\n\nBy using the provided python code, an optional Raspberry Pi video camera can be integrated into this system. Otherwise, any computer can be used as a host to drive an experiment from within Python.\n\n\nWe are routinely using this treadmill and video aquisition system while simultaneously acquiring in vivo two-photon images using ScanImage software (in Matlab) with National Instruments data acquisition cards.\n\n\nSee the \nparts list\n for a full list of parts, prices, and links to buy online.\n\n\nArduino\n\n\nThe majority of Arduino compatible micro-controllers will work with the code provided. We suggest starting with an Arduino \nUno\n. Two alternative micro-controllers are the \nMega\n and the \nTeensy\n. Both of these boards provide more low-level interrupts and have more memory than an Uno. In addition, the Teensy has a more advanced and faster Arm Cortex processor over the ATmega processor in the Uno and Mega.\n\n\n\n\nArduino Uno\n, \nSparkfun\n, \nAdafruit\n, $25\n\n\nStepper Motor, \nSparkfun - 09238\n, $15\n\n\nStepper motor driver, EasyDriver, \nSparkfun - 12779\n, $15. Main website for \nEasyDriver\n\n\nRotary encoder, \nHoneywell-600-128-CBL\n, \n.pdf\n spec sheet, $37\n\n\n\n\nRaspberry Pi\n\n\nThe \nRaspberry Pi\n is a fully functional credit-card sized computer with USB, Ethernet, Wifi, and HDMI ports. It can be used as a host computer to program an Arduino using the Arduino IDE. A unique feature of the Pi is that it has built in digital GPIO. Thus, a Raspberry Pi can send/receive GPIO signals to/from most laboratory equipment including an Arduino. The Pi can be equipped with a dedicated video camera (5MP or 8MP) that can be controlled from Python and can be (relatively) precisely triggered by GPIO pulses. Given its small footprint, a Raspberry Pi is easily integrated into the same electronics box as the Arduino.\n\n\n\n\nRaspberry Pi\n, \nAdaFruit\n, \nElement14\n, $40\n\n\nPi NoIR\n 5MP Camera, \nAdafruit\n, \nElement14\n, $30\n\n\nIR LED, 840-850 nm, \nSparkfun - 9469\n $1 each (960 nm IR LEDs do not work well with Pi NoIR camera)\n\n\n4-channel Logic Level Converter (Bi-Directional), \nSparkfun\n, \nAdafruit\n, $4\n\n\n\n\nPlease note, the GPIO ports on the Rapsberry Pi are only 3.5V tolerant while most laboratory equipment (including many Arduinos and National Instruments boards) use 5V GPIO. Thus, a logic-level converter is needed to convert between 3.5V on the Pi to 5V on other equipment.\n\n\nWiring the system\n\n\n\n\nWire the stepper motor to the motor driver\n\n\nWire the Arduino to the motor driver\n\n\nWire the rotary encoder to the Arduino\n\n\nWire the Arduino to Scan Image\n\n\nWire the Raspberry Pi to Scan Image via a 3.5V to 5V level shifter\n\n\n\n\nHere, we are wiring the system to interact with Scan Image. This can easily be modified by wiring the system to other in-place acquisition systems such as those from Scientifica, Bruger (Prarie), Zeiss, or Nikon.\n\n\n\n\nTreadmill\n\n\nSee the \nimages\n page and the \ntreadmill section\n of the parts list.\n\n\nBuilding the treamill is easy but finding the pieces to build with can be time-consuming and frustrating. A good starting point is to use \nActobotics\n parts from \nServoCity\n or \nSparkfun\n. In particular, \nServoCity\n, has made a useful set of visual guides and project ideas that are really helpful in designing hardware components. Structural components include: frames, rods, bearings, clamps, and motor mounts.\n\n\nUpload code to the Arduino\n\n\nThe source code for the Arduino can be found in \n/arduino/src/treadmill.cpp\n.\n\n\nRequired libraries\n\n\nNon-blocking libraries should be used, otherwise the system will not perform well. Without non-blocking libraries, the code to turn the stepper motor will block other code like reading the rotary encoder and vica versa. Using these non-blocking libraries ensures that (but do not gaurantee) the stepper motor movement does not stutter and all the rotary encoder positions are logged.\n\n\n\n\nAccelStepper\n library to control stepper motor\n\n\nRotary encoder library from \nPJRC\n\n\n\n\nArduino IDE\n\n\nUse the standard \nArduino IDE\n to upload treadmill.cpp to an Arduino. Make sure the required Arduino libraries are installed. Be sure to activate additional \nlow level interrupts\n if using an Arduino Uno.\n\n\nPlatformio\n\n\nCode can also be uploaded to an Arduino using \nPlatformIo\n. This has the distinct advantage that code can be compiled and uploaded from the command line on a headless computer including a Raspberry Pi or any system running Linux. Please see my blog post to Install PlatformIO, compile code and upload it to an Arduino.\n\n\n\n\nLow Level Interrupts\n\n\nThe Arduino Uno only comes with two pins (2 and 3) capable of low-level interrupts and more pins need to be enabled. Two low level interrupts are needed for the Rotary Encoder, another for a GPIO trigger, and another for GPIO pulses coming from a frame clock. See \nPin-change interrupts\n for information on exposing additional pins as low-level interrupts.\n\n\nWe have included a compiler directive \n_expose_interrupts_\n in the Arduino code, \ntreadmill.cpp\n, that if activated will run code to expose the needed interrupts on an Arduino Uno.\n\n\n\n\nIf using platformio this is taken care of in the [env] section of platformio.ini\n\n\nIf using the arduino IDE, \ndefine _expose_interrupts_ = 1\n must be included in \ntreadmill.cpp\n\n\n\n\n//Uncomment this line if running on an Arduino Uno and compiling with the arduino IDE\n//#define _expose_interrupts_ 1\n\n\n\n\nPython server setup\n\n\nDownload and install \nAnaconda\n. Anaconda is a \npython\n installation that will install many commonly used libraries. It is much easier to get started with Anaconda rather than a basic installation of Python.\n\n\nPython libraries\n\n\nInstall additional required python libraries using the included requirements.txt file\n\n\npip install -r requirements.txt\n\n\nHere is the requirements.txt file\n\n\neventlet\n=0.18.4\nFlask\n=0.10.1\nFlask-Markdown\n=0.3\nFlask-SocketIO\n=1.0\nplatformio\n=2.8.5\nplotly\n=1.9.6\npyserial\n=3.0.1\n\n\n\n\nRequired python libraries on Raspberry Pi\n\n\npip install -r raspberry_requirements.txt\n\n\npicamera\nRPi.GPIO\n\n\n\n\nRunning an experiment\n\n\nAt its core, an experiment is run on an Arduino by interacting with \ntreadmill.cpp\n through a serial port interface. In addition, a Python command line interface and a web based interface are provided.\n\n\nThese interfaces can be extended by directly interacting with the Arduino code in \ntreadmill.cpp\n (with serial commands), the python code in \ntreadmill.py\n, or the web server code in \ntreadmill_app.py\n.\n\n\nArduino serial interface\n\n\nThe Arduino code \ntreadmill.cpp\n provides a set of serial port commands to get/set parameters and start/stop a trial. Once the code is uploaded to an Arduino, any serial port interface will allow control of an experiment as follows...\n\n\nstartTrial # start a trial\nstopTrial # stop a trial\ngetState #\nsettrial,[name],[value]\n\n\n\n\nsettrial\n takes the \nname\n and \nvalue\n of a trial parameter to set. The \nname\n needs to be one of: numPulse, numEpoch, epochDur, preDur, etc. These names match the 'Stimulus' parameters provided in the web interface. See the SetTrial() function in \ntreadmill.cpp\n for all possible trial parameters.\n\n\nEntering \ngetState\n in a serial port interface and the Arduino will return the current values for all trial parameters. This is a good way to find the names of trial parameters and then set them. For example, \nsettrial,epochDur,5000\n.\n\n\n=== Arduino State ===\ntrialNumber=0\ntrialDur=1000\nnumEpoch=1\nepochDur=1000\npreDur=1000\npostDur=1000\nnumPulse=3\npulseDur=1000\nuseMotor=1\nmotorDel=200\nmotorDur=200\nmotorSpeed=0\nmotorMaxSpeed=0\nversionStr=20160322\n=== Done ===\n\n\n\n\nPython interface\n\n\nAn experiment can be controlled from within Python by interacting with \ntreadmill.py\n. This includes interaction from a Python command line interface, a \niPython/Jupyter\n interface, or custom written Python scripts. Here is an example of running an experiment from a Python script.\n\n\nimport treadmill\nt = treadmill.treadmill() # create a treadmill object\nt.startTrial() # start a new trial\nt.stopTrial() # stop a trial\nt.GetArduinoState() # get the current state with all trial parameters (see Arduino getstate below).\nt.settrial('epochDur',5000) # set the value of 'epochDur' trial parameter to 5000 ms\nt.startTrial() # start a new trial\n\n\n\n\nThe Python interface and Arduino interface share all trial parameter names.\n\n\nWeb interface\n\n\nAn experiment can also be controlled through a web browser interface. Run the web interface with \npython treadmill_app.py\n. The code for this web interface, in \ntreadmill_app.py\n, uses the \nFlask\n Python library. Flask is a micro-framework that allows a web-server to be created and controlled all from within Python.\n\n\nConfiguring the web interface\n\n\n\n\n\n\nChange the default IP address and port of the web server in \ntreadmill_app.py\n.\n\n\n\n\n\n\nTo run the web server on the machines local network IP, port 5010\n\n\n\n\nsocketio.run(app, host='0.0.0.0', port=5010, use_reloader=True)\n\n\n\n\n\n\n\n\nTo run the web server on localhost 127.0.0.1:5010, use this if using a single machine (no LAN needed)\n\n\n\n\nsocketio.run(app, host='', port=5010, use_reloader=True)\n\n\n\n\n\n\n\n\nClient side\n\n\nThe \nweb interface\n that is using a number of client and server libraries. See \nindex.html\n and \nanalysis2.html\n for client-side code.\n\n\n\n\nSocket-io\n allows the flask server to push updates to web-page without reloading the page\n\n\nBootstrap\n for page layout, buttons, sliders, value display\n\n\njquery\n to handle logic of user interface\n\n\nplotly.js\n to plot the arduino stimulus\n\n\nhighcharts.js\n to plot a trial while it is running\n\n\njqgrid\n to display a table of trials from disk\n\n\n\n\nConlusion\n\n\nThis is a good system.", 
            "title": "home"
        }, 
        {
            "location": "/#introduction", 
            "text": "This is documentation for controlling a behavioral experiment using an Arduino microcontroller using Python. The experiment can be controlled from a Python command line or with an easy to use web browser interface. Included in this system is an option to simultaneously record video using a Rapsberry Pi video camera. Our goal is to provide a starting point for open-source behavioral experiments that can be extended to new experimental designs.    Figure 1. Web-browser interface.  The top section provides an interface to start/stop a trial and plots real-time feedback as the trial is running.  The  Stimulus  section provides an interface to set stimulus parameters for a trial and to upload these parameters to an Arduino. This section also provides a plot of what the trial will look like based on the set of stimulus parameters entered (this plot is not shown in this example).", 
            "title": "Introduction"
        }, 
        {
            "location": "/#system-design", 
            "text": "The core system consists of an Arduino, a stepper motor and motor driver, and a rotary encoder. The system comes together with a circular  treadmill  that can be driven by the stepper motor. Finally, the position of the treadmill is recorded with the rotary encoder.  The Arduino can be controlled with serial commands and can be triggered with general purpose digital input-output (GPIO) pulses. By relying on serial commands and GPIO pulses, this system is not dependent on the details of other pieces of equipment already in place for an experiment and can be extended to new and unique experimental configurations.  By using the provided python code, an optional Raspberry Pi video camera can be integrated into this system. Otherwise, any computer can be used as a host to drive an experiment from within Python.  We are routinely using this treadmill and video aquisition system while simultaneously acquiring in vivo two-photon images using ScanImage software (in Matlab) with National Instruments data acquisition cards.  See the  parts list  for a full list of parts, prices, and links to buy online.", 
            "title": "System design"
        }, 
        {
            "location": "/#arduino", 
            "text": "The majority of Arduino compatible micro-controllers will work with the code provided. We suggest starting with an Arduino  Uno . Two alternative micro-controllers are the  Mega  and the  Teensy . Both of these boards provide more low-level interrupts and have more memory than an Uno. In addition, the Teensy has a more advanced and faster Arm Cortex processor over the ATmega processor in the Uno and Mega.   Arduino Uno ,  Sparkfun ,  Adafruit , $25  Stepper Motor,  Sparkfun - 09238 , $15  Stepper motor driver, EasyDriver,  Sparkfun - 12779 , $15. Main website for  EasyDriver  Rotary encoder,  Honeywell-600-128-CBL ,  .pdf  spec sheet, $37", 
            "title": "Arduino"
        }, 
        {
            "location": "/#raspberry-pi", 
            "text": "The  Raspberry Pi  is a fully functional credit-card sized computer with USB, Ethernet, Wifi, and HDMI ports. It can be used as a host computer to program an Arduino using the Arduino IDE. A unique feature of the Pi is that it has built in digital GPIO. Thus, a Raspberry Pi can send/receive GPIO signals to/from most laboratory equipment including an Arduino. The Pi can be equipped with a dedicated video camera (5MP or 8MP) that can be controlled from Python and can be (relatively) precisely triggered by GPIO pulses. Given its small footprint, a Raspberry Pi is easily integrated into the same electronics box as the Arduino.   Raspberry Pi ,  AdaFruit ,  Element14 , $40  Pi NoIR  5MP Camera,  Adafruit ,  Element14 , $30  IR LED, 840-850 nm,  Sparkfun - 9469  $1 each (960 nm IR LEDs do not work well with Pi NoIR camera)  4-channel Logic Level Converter (Bi-Directional),  Sparkfun ,  Adafruit , $4   Please note, the GPIO ports on the Rapsberry Pi are only 3.5V tolerant while most laboratory equipment (including many Arduinos and National Instruments boards) use 5V GPIO. Thus, a logic-level converter is needed to convert between 3.5V on the Pi to 5V on other equipment.", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/#wiring-the-system", 
            "text": "Wire the stepper motor to the motor driver  Wire the Arduino to the motor driver  Wire the rotary encoder to the Arduino  Wire the Arduino to Scan Image  Wire the Raspberry Pi to Scan Image via a 3.5V to 5V level shifter   Here, we are wiring the system to interact with Scan Image. This can easily be modified by wiring the system to other in-place acquisition systems such as those from Scientifica, Bruger (Prarie), Zeiss, or Nikon.", 
            "title": "Wiring the system"
        }, 
        {
            "location": "/#treadmill", 
            "text": "See the  images  page and the  treadmill section  of the parts list.  Building the treamill is easy but finding the pieces to build with can be time-consuming and frustrating. A good starting point is to use  Actobotics  parts from  ServoCity  or  Sparkfun . In particular,  ServoCity , has made a useful set of visual guides and project ideas that are really helpful in designing hardware components. Structural components include: frames, rods, bearings, clamps, and motor mounts.", 
            "title": "Treadmill"
        }, 
        {
            "location": "/#upload-code-to-the-arduino", 
            "text": "The source code for the Arduino can be found in  /arduino/src/treadmill.cpp .", 
            "title": "Upload code to the Arduino"
        }, 
        {
            "location": "/#required-libraries", 
            "text": "Non-blocking libraries should be used, otherwise the system will not perform well. Without non-blocking libraries, the code to turn the stepper motor will block other code like reading the rotary encoder and vica versa. Using these non-blocking libraries ensures that (but do not gaurantee) the stepper motor movement does not stutter and all the rotary encoder positions are logged.   AccelStepper  library to control stepper motor  Rotary encoder library from  PJRC", 
            "title": "Required libraries"
        }, 
        {
            "location": "/#arduino-ide", 
            "text": "Use the standard  Arduino IDE  to upload treadmill.cpp to an Arduino. Make sure the required Arduino libraries are installed. Be sure to activate additional  low level interrupts  if using an Arduino Uno.", 
            "title": "Arduino IDE"
        }, 
        {
            "location": "/#platformio", 
            "text": "Code can also be uploaded to an Arduino using  PlatformIo . This has the distinct advantage that code can be compiled and uploaded from the command line on a headless computer including a Raspberry Pi or any system running Linux. Please see my blog post to Install PlatformIO, compile code and upload it to an Arduino.", 
            "title": "Platformio"
        }, 
        {
            "location": "/#low-level-interrupts", 
            "text": "The Arduino Uno only comes with two pins (2 and 3) capable of low-level interrupts and more pins need to be enabled. Two low level interrupts are needed for the Rotary Encoder, another for a GPIO trigger, and another for GPIO pulses coming from a frame clock. See  Pin-change interrupts  for information on exposing additional pins as low-level interrupts.  We have included a compiler directive  _expose_interrupts_  in the Arduino code,  treadmill.cpp , that if activated will run code to expose the needed interrupts on an Arduino Uno.   If using platformio this is taken care of in the [env] section of platformio.ini  If using the arduino IDE,  define _expose_interrupts_ = 1  must be included in  treadmill.cpp   //Uncomment this line if running on an Arduino Uno and compiling with the arduino IDE\n//#define _expose_interrupts_ 1", 
            "title": "Low Level Interrupts"
        }, 
        {
            "location": "/#python-server-setup", 
            "text": "Download and install  Anaconda . Anaconda is a  python  installation that will install many commonly used libraries. It is much easier to get started with Anaconda rather than a basic installation of Python.", 
            "title": "Python server setup"
        }, 
        {
            "location": "/#python-libraries", 
            "text": "Install additional required python libraries using the included requirements.txt file  pip install -r requirements.txt  Here is the requirements.txt file  eventlet =0.18.4\nFlask =0.10.1\nFlask-Markdown =0.3\nFlask-SocketIO =1.0\nplatformio =2.8.5\nplotly =1.9.6\npyserial =3.0.1  Required python libraries on Raspberry Pi  pip install -r raspberry_requirements.txt  picamera\nRPi.GPIO", 
            "title": "Python libraries"
        }, 
        {
            "location": "/#running-an-experiment", 
            "text": "At its core, an experiment is run on an Arduino by interacting with  treadmill.cpp  through a serial port interface. In addition, a Python command line interface and a web based interface are provided.  These interfaces can be extended by directly interacting with the Arduino code in  treadmill.cpp  (with serial commands), the python code in  treadmill.py , or the web server code in  treadmill_app.py .", 
            "title": "Running an experiment"
        }, 
        {
            "location": "/#arduino-serial-interface", 
            "text": "The Arduino code  treadmill.cpp  provides a set of serial port commands to get/set parameters and start/stop a trial. Once the code is uploaded to an Arduino, any serial port interface will allow control of an experiment as follows...  startTrial # start a trial\nstopTrial # stop a trial\ngetState #\nsettrial,[name],[value]  settrial  takes the  name  and  value  of a trial parameter to set. The  name  needs to be one of: numPulse, numEpoch, epochDur, preDur, etc. These names match the 'Stimulus' parameters provided in the web interface. See the SetTrial() function in  treadmill.cpp  for all possible trial parameters.  Entering  getState  in a serial port interface and the Arduino will return the current values for all trial parameters. This is a good way to find the names of trial parameters and then set them. For example,  settrial,epochDur,5000 .  === Arduino State ===\ntrialNumber=0\ntrialDur=1000\nnumEpoch=1\nepochDur=1000\npreDur=1000\npostDur=1000\nnumPulse=3\npulseDur=1000\nuseMotor=1\nmotorDel=200\nmotorDur=200\nmotorSpeed=0\nmotorMaxSpeed=0\nversionStr=20160322\n=== Done ===", 
            "title": "Arduino serial interface"
        }, 
        {
            "location": "/#python-interface", 
            "text": "An experiment can be controlled from within Python by interacting with  treadmill.py . This includes interaction from a Python command line interface, a  iPython/Jupyter  interface, or custom written Python scripts. Here is an example of running an experiment from a Python script.  import treadmill\nt = treadmill.treadmill() # create a treadmill object\nt.startTrial() # start a new trial\nt.stopTrial() # stop a trial\nt.GetArduinoState() # get the current state with all trial parameters (see Arduino getstate below).\nt.settrial('epochDur',5000) # set the value of 'epochDur' trial parameter to 5000 ms\nt.startTrial() # start a new trial  The Python interface and Arduino interface share all trial parameter names.", 
            "title": "Python interface"
        }, 
        {
            "location": "/#web-interface", 
            "text": "An experiment can also be controlled through a web browser interface. Run the web interface with  python treadmill_app.py . The code for this web interface, in  treadmill_app.py , uses the  Flask  Python library. Flask is a micro-framework that allows a web-server to be created and controlled all from within Python.", 
            "title": "Web interface"
        }, 
        {
            "location": "/#configuring-the-web-interface", 
            "text": "Change the default IP address and port of the web server in  treadmill_app.py .    To run the web server on the machines local network IP, port 5010   socketio.run(app, host='0.0.0.0', port=5010, use_reloader=True)     To run the web server on localhost 127.0.0.1:5010, use this if using a single machine (no LAN needed)   socketio.run(app, host='', port=5010, use_reloader=True)", 
            "title": "Configuring the web interface"
        }, 
        {
            "location": "/#client-side", 
            "text": "The  web interface  that is using a number of client and server libraries. See  index.html  and  analysis2.html  for client-side code.   Socket-io  allows the flask server to push updates to web-page without reloading the page  Bootstrap  for page layout, buttons, sliders, value display  jquery  to handle logic of user interface  plotly.js  to plot the arduino stimulus  highcharts.js  to plot a trial while it is running  jqgrid  to display a table of trials from disk", 
            "title": "Client side"
        }, 
        {
            "location": "/#conlusion", 
            "text": "This is a good system.", 
            "title": "Conlusion"
        }, 
        {
            "location": "/images/", 
            "text": "Prototype\n\n\nThis is the first prototype built on the scope.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinal\n\n\nThese are images of the final treadmill.\n\n\n[coming soon]", 
            "title": "images"
        }, 
        {
            "location": "/images/#prototype", 
            "text": "This is the first prototype built on the scope.", 
            "title": "Prototype"
        }, 
        {
            "location": "/images/#final", 
            "text": "These are images of the final treadmill.  [coming soon]", 
            "title": "Final"
        }, 
        {
            "location": "/parts/", 
            "text": "Parts List\n\n\nArduino\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n1\n\n\nArduino Uno\n\n\n$xxx\n\n\nUno\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nMotor Driver\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n\n\nRaspberry Pi\n\n\nYou might want to buy a Raspberry Pi starter kit from \nCanakit\n. These kits include most of the parts you need to get a fully working Raspberry Pi.\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n1\n\n\nRaspberry Pi 3\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nMemory Card\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\n5V 2A AC/DC power\n\n\n$8\n\n\nxxx\n\n\nlink\n\n\n\n\n\n\n1\n\n\nPi NoIR Camera\n\n\n$30\n\n\nxxx\n\n\nlink\n\n\n\n\n\n\n1\n\n\nPi Camera Ribbon cable (2 meters)\n\n\n$6\n\n\nxxx\n\n\nlink\n\n\n\n\n\n\n1\n\n\nPi Camera HDMI extension cable\n\n\n$15\n\n\nxxx\n\n\nlink\n\n\n\n\n\n\n\n\nMotors and encoders\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n1\n\n\nStepper Motor\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nRotary Encoder\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\n12V AC/DC Adapter (for the Motor Driver)\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n\n\nElectronics\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n1\n\n\nBreadboard\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nJumper wires (M/M)\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nJumper wires (M/F)\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n1\n\n\nJumper wires (F/F)\n\n\n$xxx\n\n\nxxx\n\n\nxxx\n\n\n\n\n\n\n\n\n\n\nTreadmill\n\n\nThese are \nActobotics\n parts from \nServoCity\n\n\n\n\n\n\n\n\nQuatity\n\n\nItem\n\n\nCost\n\n\nPart #\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n\n\nAluminum channels\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n4\n\n\n1.50 inch Aluminum Channel\n\n\n2.99\n\n\n585440\n\n\n\n\n\n\n\n\n4\n\n\n6.00 inch Aluminum Channel\n\n\n5.99\n\n\n585446\n\n\n\n\n\n\n\n\n1\n\n\n9.00 inch Aluminum Channel\n\n\n7.99\n\n\n585450\n\n\n\n\n\n\n\n\n1\n\n\n15 inch Aluminum Channel\n\n\n11.99\n\n\n585458\n\n\n\n\n\n\n\n\n\n\nShafts and shaft couplers\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n2\n\n\n1/4 inch x12 inch Precision Shaft\n\n\n3.59\n\n\n634178\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch x4 inch Precision Shaft\n\n\n1.49\n\n\n634164\n\n\n\n\n\n\n\n\n1\n\n\n1/4 inch x6 inch Precision Shaft\n\n\n2.09\n\n\n634168\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch to 5mm Set Screw Shaft Coupler\n\n\n4.99\n\n\n625120\n\n\n\n\n\n\n\n\n2\n\n\n1/4 inch to 1/4 inch Set Screw Shaft Coupler\n\n\n4.99\n\n\n625104\n\n\n\n\n\n\n\n\n\n\nCouplers and adapters\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n8\n\n\n1/4 inch Bore Clamping Hub (0.770 inch)\n\n\n7.99\n\n\n545588\n\n\n\n\n\n\n\n\n4\n\n\n1/4 inch Bore Set Screw Hub (0.770 inch)\n\n\n4.99\n\n\n545548\n\n\n\n\n\n\n\n\n2\n\n\nStepper Motor Mount (NEMA 17)\n\n\n7.49\n\n\n555152\n\n\n\n\n\n\n\n\n4\n\n\n1/4-20 Round Screw Plate\n\n\n3.99\n\n\n545468\n\n\n\n\n\n\n\n\n2\n\n\nLarge Square Screw Plate\n\n\n2.69\n\n\n585430\n\n\n\n\n\n\n\n\n1\n\n\n90 Degree Quad Hub Mount C\n\n\n5.99\n\n\n545360\n\n\n\n\n\n\n\n\n1\n\n\n90 Degree Quad Hub Mount D\n\n\n5.99\n\n\n545324\n\n\n\n\n\n\n\n\n\n\nBall bearings\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n3\n\n\n.250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack\n\n\n1.99\n\n\n535198\n\n\n\n\n\n\n\n\n1\n\n\nDual Ball Bearing Hub A\n\n\n6.99\n\n\n545444\n\n\n\n\n\n\n\n\n1\n\n\n1/4 inch Shafting \n Tubing Spacers (12 pk)\n\n\n1.69\n\n\n633104\n\n\n\n\n\n\n\n\n\n\nGears\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n1\n\n\n16T, 0.250 inch Bore, 32P Bevel Gear\n\n\n5.99\n\n\n615442\n\n\n\n\n\n\n\n\n1\n\n\n32T, 0.250 inch Bore, 32P Bevel Gear\n\n\n7.99\n\n\n615444\n\n\n\n\n\n\n\n\n1\n\n\n16T, 5mm Bore, 32P Bevel Gear\n\n\n5.99\n\n\n615438\n\n\n\n\n\n\n\n\n2\n\n\n48 Tooth, 32 Pitch Hub Gear (3/16 inch Face)\n\n\n5.20\n\n\nRHA32-36-48\n\n\n\n\n\n\n\n\n\n\nFasteners\n\n\n\n\n\n\nlink\n\n\n\n\n\n\n24\n\n\n6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated)\n\n\n0.06\n\n\n90272A146\n\n\n\n\n\n\n\n\n8\n\n\n1/2 inch 1/4-20 Flat Head Phillips Machine Screws\n\n\n0.38\n\n\n90273A537\n\n\n\n\n\n\n\n\n1\n\n\n3/32 Hex Key\n\n\n1.39\n\n\n57185A11\n\n\n\n\n\n\n\n\n6\n\n\n.250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk)\n\n\n1.69\n\n\n632106", 
            "title": "parts"
        }, 
        {
            "location": "/parts/#parts-list", 
            "text": "", 
            "title": "Parts List"
        }, 
        {
            "location": "/parts/#arduino", 
            "text": "Quatity  Item  Cost  Part #  Link      1  Arduino Uno  $xxx  Uno  xxx    1  Motor Driver  $xxx  xxx  xxx", 
            "title": "Arduino"
        }, 
        {
            "location": "/parts/#raspberry-pi", 
            "text": "You might want to buy a Raspberry Pi starter kit from  Canakit . These kits include most of the parts you need to get a fully working Raspberry Pi.     Quatity  Item  Cost  Part #  Link      1  Raspberry Pi 3  $xxx  xxx  xxx    1  Memory Card  $xxx  xxx  xxx    1  5V 2A AC/DC power  $8  xxx  link    1  Pi NoIR Camera  $30  xxx  link    1  Pi Camera Ribbon cable (2 meters)  $6  xxx  link    1  Pi Camera HDMI extension cable  $15  xxx  link", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/parts/#motors-and-encoders", 
            "text": "Quatity  Item  Cost  Part #  Link      1  Stepper Motor  $xxx  xxx  xxx    1  Rotary Encoder  $xxx  xxx  xxx    1  12V AC/DC Adapter (for the Motor Driver)  $xxx  xxx  xxx", 
            "title": "Motors and encoders"
        }, 
        {
            "location": "/parts/#electronics", 
            "text": "Quatity  Item  Cost  Part #  Link      1  Breadboard  $xxx  xxx  xxx    1  Jumper wires (M/M)  $xxx  xxx  xxx    1  Jumper wires (M/F)  $xxx  xxx  xxx    1  Jumper wires (F/F)  $xxx  xxx  xxx", 
            "title": "Electronics"
        }, 
        {
            "location": "/parts/#treadmill", 
            "text": "These are  Actobotics  parts from  ServoCity     Quatity  Item  Cost  Part #  Link       Aluminum channels    link    4  1.50 inch Aluminum Channel  2.99  585440     4  6.00 inch Aluminum Channel  5.99  585446     1  9.00 inch Aluminum Channel  7.99  585450     1  15 inch Aluminum Channel  11.99  585458      Shafts and shaft couplers    link    2  1/4 inch x12 inch Precision Shaft  3.59  634178     2  1/4 inch x4 inch Precision Shaft  1.49  634164     1  1/4 inch x6 inch Precision Shaft  2.09  634168     2  1/4 inch to 5mm Set Screw Shaft Coupler  4.99  625120     2  1/4 inch to 1/4 inch Set Screw Shaft Coupler  4.99  625104      Couplers and adapters    link    8  1/4 inch Bore Clamping Hub (0.770 inch)  7.99  545588     4  1/4 inch Bore Set Screw Hub (0.770 inch)  4.99  545548     2  Stepper Motor Mount (NEMA 17)  7.49  555152     4  1/4-20 Round Screw Plate  3.99  545468     2  Large Square Screw Plate  2.69  585430     1  90 Degree Quad Hub Mount C  5.99  545360     1  90 Degree Quad Hub Mount D  5.99  545324      Ball bearings    link    3  .250 inch ID x .500 inch OD Flanged Ball Bearing (Stainless Steel) 2 pack  1.99  535198     1  Dual Ball Bearing Hub A  6.99  545444     1  1/4 inch Shafting   Tubing Spacers (12 pk)  1.69  633104      Gears    link    1  16T, 0.250 inch Bore, 32P Bevel Gear  5.99  615442     1  32T, 0.250 inch Bore, 32P Bevel Gear  7.99  615444     1  16T, 5mm Bore, 32P Bevel Gear  5.99  615438     2  48 Tooth, 32 Pitch Hub Gear (3/16 inch Face)  5.20  RHA32-36-48      Fasteners    link    24  6-32x3/8 inch Pan Head Phillips Machine Screws (Zinc-Plated)  0.06  90272A146     8  1/2 inch 1/4-20 Flat Head Phillips Machine Screws  0.38  90273A537     1  3/32 Hex Key  1.39  57185A11     6  .250 in L x 6-32 Zinc-Plated Alloy Steel Socket Head Cap Screw (25 pk)  1.69  632106", 
            "title": "Treadmill"
        }, 
        {
            "location": "/dev/", 
            "text": "Development\n\n\nmkDocs\n\n\nThis documentation is written in markdown and a static site is generated with \nmkDocs\n using the \nCinder\n theme. Previously I have used Jekyll which is amazing. Going with mkDocs to see if a simple site is acceptable.\n\n\nWhen writing markdown, serve a mkDocs site locally with\n\n\ncd docs/\nmkdocs serve --dev-addr=0.0.0.0:8000 # serves built site on LAN IP\nmkdocs serve # serves built site on localhost at 127.0.0.1:8000\n\nmkdocs build #generates the site into docs/site/\n\n\n\n\nDeploy to Github gh-pages\n\n\nDeploy to github gh-pages by follow mkDocs \ndeployment instructions\n.\n\n\nmkdocs gh-deploy\n will use the gh-pages branch of repository specified in \nmkdocs.yml\n\n\n# this will deploy to github gh-pages specified in mkdocs.yml\ncd docs #should have mkdocs.yml file\nmkdocs build --clean\nmkdocs gh-deploy --clean \n#site is then available at\nhttp://cudmore.github.io/treadmill\n\n\n\nI am doing this on OSX. Not doing this on Debian because I do not have git/github properly configured.\n\n\nTweak Cinder\n\n\nAlong the way I have actually contributed to \nCinder\n, the mkDocs template that makes this site. See \nhere\n.\n\n\nUse 'pip show mkdocs' to figure out where your cinder files are\n\n\npip show mkdocs\n/home/cudmore/anaconda2/lib/python2.7/site-packages\n\n\n\nGenerate a single PDF from mkDocs site\n\n\nUse \nmkdocs-pandoc\n to convert the mkdocs site into a single pdf. This creates a table of contents and appends all .md files using \npandoc\n as a backend.\n\n\ncd docs\nmkdocs2pandoc \n mydocs.pd\npandoc --toc -f markdown+grid_tables+table_captions -o mydocs.pdf mydocs.pd   # Generate PDF\npandoc --toc -f markdown+grid_tables -t epub -o mydocs.epub mydocs.pd         # Generate EPUB\n\n\n\n\nI found it easy to do this on OSX using the pandoc installer. I did not get this working on Debian.\n\n\nPlatformio\n\n\nIf you prefer you can use [Platformio][5] to do everything from a command line. This has the distinct advantage that you can compile and upload code from a headless computer including a Raspberry Pi or any system running Linux.\n\n\nPlatformio is a python library so you should be good to go with \npip install platformio\n. \n\n\nHave a look [here][6] to create a platformio.ini file for your specific Arduino. Here are three different board configurations\n\n\nplatformio init --board uno # arduino uno\nplatformio init --board pro16MHzatmega328 # generic arduino pro \nplatformio init --board nodemcuv2 # arduino node mcu\n\n\n\n\nAfter 'platformio init', platformio.ini will have environment configurations. You only want to have one of these blocks at a time to simplify compilation. For example [env:uno].\n\n\n[env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\nbuild_flags = -D _expose_interrupts_ #creates compiler directive\n\n#[env:pro16MHzatmega328]\n#platform = atmelavr\n#framework = arduino\n#board = pro16MHzatmega328\n\n#[env:nodemcuv2]\n#platform = espressif\n#framework = arduino\n#board = nodemcuv2\n#upload_port = /dev/ttyUSB0\n\n\n\n\nCompile, upload, and clean Arduino code with\n\n\nplatformio run #compile arduino code\nplatformio run --target upload #compile and upload\nplatformio run --target clean #clean project \n\n\n\n\nFinally, once the code is running you can open a serial port connection with\n\n\nplatformio serialports monitor -p /dev/ttyUSB0 -b 115200 #a serial port monitor\n\n\n\n\nSpecifying the correct serial port for the Arduino is critical. Specify this in the treadmill.py file.\n\n\n#serialStr = '/dev/tty.usbmodem618661' #teensy at work\n#serialStr = '/dev/tty.usbmodem618661' #teensy?\n#serialStr = '/dev/ttyUSB0' #hand soldered arduino micro (home debian)\n#serialStr = '/dev/tty.usbserial-A50285BI' # hand soldered at work\nserialStr = '/dev/ttyACM0' #uno\n\n\n\n\n5V Relay\n\n\nA relay allows a 3.5 or 5 V DIO pin to turn a higher voltage switch on and off. For example, you use a 5V relay to turn a 12V line on and off.\n\n\nHow to wire a 5V relay is here\n\n\nhttp://www.codeguru.com/IoT/understanding-relays-in-iot-development.html", 
            "title": "dev"
        }, 
        {
            "location": "/dev/#development", 
            "text": "", 
            "title": "Development"
        }, 
        {
            "location": "/dev/#mkdocs", 
            "text": "This documentation is written in markdown and a static site is generated with  mkDocs  using the  Cinder  theme. Previously I have used Jekyll which is amazing. Going with mkDocs to see if a simple site is acceptable.  When writing markdown, serve a mkDocs site locally with  cd docs/\nmkdocs serve --dev-addr=0.0.0.0:8000 # serves built site on LAN IP\nmkdocs serve # serves built site on localhost at 127.0.0.1:8000\n\nmkdocs build #generates the site into docs/site/", 
            "title": "mkDocs"
        }, 
        {
            "location": "/dev/#deploy-to-github-gh-pages", 
            "text": "Deploy to github gh-pages by follow mkDocs  deployment instructions .  mkdocs gh-deploy  will use the gh-pages branch of repository specified in  mkdocs.yml  # this will deploy to github gh-pages specified in mkdocs.yml\ncd docs #should have mkdocs.yml file\nmkdocs build --clean\nmkdocs gh-deploy --clean \n#site is then available at\nhttp://cudmore.github.io/treadmill  I am doing this on OSX. Not doing this on Debian because I do not have git/github properly configured.", 
            "title": "Deploy to Github gh-pages"
        }, 
        {
            "location": "/dev/#tweak-cinder", 
            "text": "Along the way I have actually contributed to  Cinder , the mkDocs template that makes this site. See  here .  Use 'pip show mkdocs' to figure out where your cinder files are  pip show mkdocs\n/home/cudmore/anaconda2/lib/python2.7/site-packages", 
            "title": "Tweak Cinder"
        }, 
        {
            "location": "/dev/#generate-a-single-pdf-from-mkdocs-site", 
            "text": "Use  mkdocs-pandoc  to convert the mkdocs site into a single pdf. This creates a table of contents and appends all .md files using  pandoc  as a backend.  cd docs\nmkdocs2pandoc   mydocs.pd\npandoc --toc -f markdown+grid_tables+table_captions -o mydocs.pdf mydocs.pd   # Generate PDF\npandoc --toc -f markdown+grid_tables -t epub -o mydocs.epub mydocs.pd         # Generate EPUB  I found it easy to do this on OSX using the pandoc installer. I did not get this working on Debian.", 
            "title": "Generate a single PDF from mkDocs site"
        }, 
        {
            "location": "/dev/#platformio", 
            "text": "If you prefer you can use [Platformio][5] to do everything from a command line. This has the distinct advantage that you can compile and upload code from a headless computer including a Raspberry Pi or any system running Linux.  Platformio is a python library so you should be good to go with  pip install platformio .   Have a look [here][6] to create a platformio.ini file for your specific Arduino. Here are three different board configurations  platformio init --board uno # arduino uno\nplatformio init --board pro16MHzatmega328 # generic arduino pro \nplatformio init --board nodemcuv2 # arduino node mcu  After 'platformio init', platformio.ini will have environment configurations. You only want to have one of these blocks at a time to simplify compilation. For example [env:uno].  [env:uno]\nplatform = atmelavr\nframework = arduino\nboard = uno\nbuild_flags = -D _expose_interrupts_ #creates compiler directive\n\n#[env:pro16MHzatmega328]\n#platform = atmelavr\n#framework = arduino\n#board = pro16MHzatmega328\n\n#[env:nodemcuv2]\n#platform = espressif\n#framework = arduino\n#board = nodemcuv2\n#upload_port = /dev/ttyUSB0  Compile, upload, and clean Arduino code with  platformio run #compile arduino code\nplatformio run --target upload #compile and upload\nplatformio run --target clean #clean project   Finally, once the code is running you can open a serial port connection with  platformio serialports monitor -p /dev/ttyUSB0 -b 115200 #a serial port monitor  Specifying the correct serial port for the Arduino is critical. Specify this in the treadmill.py file.  #serialStr = '/dev/tty.usbmodem618661' #teensy at work\n#serialStr = '/dev/tty.usbmodem618661' #teensy?\n#serialStr = '/dev/ttyUSB0' #hand soldered arduino micro (home debian)\n#serialStr = '/dev/tty.usbserial-A50285BI' # hand soldered at work\nserialStr = '/dev/ttyACM0' #uno", 
            "title": "Platformio"
        }, 
        {
            "location": "/dev/#5v-relay", 
            "text": "A relay allows a 3.5 or 5 V DIO pin to turn a higher voltage switch on and off. For example, you use a 5V relay to turn a 12V line on and off.  How to wire a 5V relay is here  http://www.codeguru.com/IoT/understanding-relays-in-iot-development.html", 
            "title": "5V Relay"
        }, 
        {
            "location": "/manuscript/", 
            "text": "A low-cost framework to control behavioral experiments using an Arduino, Python, and a web browser\n\n\n\nAbstract\n\n\nControlling an experiment with an Arduino microcontroller has become commonplace in scientific labs. A major bottle-neck in making these experiments main-stream is the difficulty in their use. Once embedded into an experiment, the control of an Arduino often involves detailed command line interaction which detracts from potentially complicated experiments. Here, we present a web interface to control an experiment with an Arduino. In particular, we have built a motorized treadmill to be used for behavioral experiments during awake head-fixed in vivo two-photon imaging. We provide schematics for building the treadmill and electronics as well as Arduino and Python code to control the experiment from within a web browser. This system also includes synchronized video recording. This is a general-purpose open-source framework where Arduino based experiments can be controlled through a web interface. The source-code can be easily modified to meet new and unique experimental designs.\n\n\nIntroduction\n\n\nBehavioral experiments performed in parallel to in vivo imaging and electrophysiological recording have become common.\n\n\nThey multi-model experiments are fundamental to understanding the bi-directional relationship between behavior and brain activity.\n\n\nFor example: spherical treadmill (ref, ref), licking experiments (ref, ref), hippocampal place fields (ref, ref).\n\n\nCommercially available laboratory equipment is available either as individual pieces of hardware or pre-packaged systems.\n\n\ngive two example systems: master-8 (ref), treadmill (ref).\n\n\nYet these commercial systems are limited in a number of ways. They are designed to do one thing and, given their proprietary design, are hard to extend to new experimental configurations. These systems are also expensive, and are thus difficult to obtain with limited funding for a potentially underfunded or exploratory experiment. Given their cost, it is also difficult to scale the use of these commercial systems beyond having a single system in a given laboratory.\n\n\nHere we present an inexpensive open-source system to control a behavioral experiment with an Arduino using a simple web browser interface. This system is low-cost and easy to build, can be adapted to new experimental configurations, and can be replicated into multiple systems running in parallel.\n\n\nSystem design\n\n\nHardware\n\n\nThe hardware for the system includes an Arduino microcontroller, a stepper motor and motor driver, a rotary encoder, a host computer, and a circular treadmill. \n\n\nWe provide a GitHub repository and website with documentation for building the hardware and wiring the components (\n1\n).\n\n\nSoftware\n\n\nThe core of the software is C++ code run on an Arduino microcontroller. This controls a trial based experiment where each trial has a pre-duration followed by a number of pulses with each pulse moving the treadmill at a given rate for a given duration.\n\n\nWe provide the full source-code with documentation in a Github repository (\n1\n).\n\n\nUsing the system\n\n\nArduino interface\n\n\nPython interface\n\n\nWeb browser interface\n\n\nApplications\n\n\nIn vivo vascular dynamics\n\n\nIn vivo Ca++ imaging\n\n\nDiscussion\n\n\nIn our research we need to simultaneously measure an animals behavior while performing two-photon imaging. While there are off the shelf solutions to this, we saw a need for a well documented and flexible open-source solution.\n\n\nBy providing this solution we hope to lower the barrier-to-entry for others who need to do similar behavioral experiments.\n\n\nWe have made the system extendible by providing multiple programming interfaces including a sub-set of C++ on an Arduino, a Python environment that can run an experiment, and a simple to use web-browser interface.\n\n\nConflict of Interest Statement\n\n\nThe authors declare that they have no commercial or financial affiliations in the subject matter or materials discussed in this manuscript.\n\n\nAcknowledgments\n\n\nFootnotes\n\n\n1: \nhttp://cudmore.github.com/treadmill\n\n\nReferences", 
            "title": "manuscript"
        }, 
        {
            "location": "/manuscript/#abstract", 
            "text": "Controlling an experiment with an Arduino microcontroller has become commonplace in scientific labs. A major bottle-neck in making these experiments main-stream is the difficulty in their use. Once embedded into an experiment, the control of an Arduino often involves detailed command line interaction which detracts from potentially complicated experiments. Here, we present a web interface to control an experiment with an Arduino. In particular, we have built a motorized treadmill to be used for behavioral experiments during awake head-fixed in vivo two-photon imaging. We provide schematics for building the treadmill and electronics as well as Arduino and Python code to control the experiment from within a web browser. This system also includes synchronized video recording. This is a general-purpose open-source framework where Arduino based experiments can be controlled through a web interface. The source-code can be easily modified to meet new and unique experimental designs.", 
            "title": "Abstract"
        }, 
        {
            "location": "/manuscript/#introduction", 
            "text": "Behavioral experiments performed in parallel to in vivo imaging and electrophysiological recording have become common.  They multi-model experiments are fundamental to understanding the bi-directional relationship between behavior and brain activity.  For example: spherical treadmill (ref, ref), licking experiments (ref, ref), hippocampal place fields (ref, ref).  Commercially available laboratory equipment is available either as individual pieces of hardware or pre-packaged systems.  give two example systems: master-8 (ref), treadmill (ref).  Yet these commercial systems are limited in a number of ways. They are designed to do one thing and, given their proprietary design, are hard to extend to new experimental configurations. These systems are also expensive, and are thus difficult to obtain with limited funding for a potentially underfunded or exploratory experiment. Given their cost, it is also difficult to scale the use of these commercial systems beyond having a single system in a given laboratory.  Here we present an inexpensive open-source system to control a behavioral experiment with an Arduino using a simple web browser interface. This system is low-cost and easy to build, can be adapted to new experimental configurations, and can be replicated into multiple systems running in parallel.", 
            "title": "Introduction"
        }, 
        {
            "location": "/manuscript/#system-design", 
            "text": "", 
            "title": "System design"
        }, 
        {
            "location": "/manuscript/#hardware", 
            "text": "The hardware for the system includes an Arduino microcontroller, a stepper motor and motor driver, a rotary encoder, a host computer, and a circular treadmill.   We provide a GitHub repository and website with documentation for building the hardware and wiring the components ( 1 ).", 
            "title": "Hardware"
        }, 
        {
            "location": "/manuscript/#software", 
            "text": "The core of the software is C++ code run on an Arduino microcontroller. This controls a trial based experiment where each trial has a pre-duration followed by a number of pulses with each pulse moving the treadmill at a given rate for a given duration.  We provide the full source-code with documentation in a Github repository ( 1 ).", 
            "title": "Software"
        }, 
        {
            "location": "/manuscript/#using-the-system", 
            "text": "", 
            "title": "Using the system"
        }, 
        {
            "location": "/manuscript/#arduino-interface", 
            "text": "", 
            "title": "Arduino interface"
        }, 
        {
            "location": "/manuscript/#python-interface", 
            "text": "", 
            "title": "Python interface"
        }, 
        {
            "location": "/manuscript/#web-browser-interface", 
            "text": "", 
            "title": "Web browser interface"
        }, 
        {
            "location": "/manuscript/#applications", 
            "text": "", 
            "title": "Applications"
        }, 
        {
            "location": "/manuscript/#in-vivo-vascular-dynamics", 
            "text": "", 
            "title": "In vivo vascular dynamics"
        }, 
        {
            "location": "/manuscript/#in-vivo-ca-imaging", 
            "text": "", 
            "title": "In vivo Ca++ imaging"
        }, 
        {
            "location": "/manuscript/#discussion", 
            "text": "In our research we need to simultaneously measure an animals behavior while performing two-photon imaging. While there are off the shelf solutions to this, we saw a need for a well documented and flexible open-source solution.  By providing this solution we hope to lower the barrier-to-entry for others who need to do similar behavioral experiments.  We have made the system extendible by providing multiple programming interfaces including a sub-set of C++ on an Arduino, a Python environment that can run an experiment, and a simple to use web-browser interface.", 
            "title": "Discussion"
        }, 
        {
            "location": "/manuscript/#conflict-of-interest-statement", 
            "text": "The authors declare that they have no commercial or financial affiliations in the subject matter or materials discussed in this manuscript.", 
            "title": "Conflict of Interest Statement"
        }, 
        {
            "location": "/manuscript/#acknowledgments", 
            "text": "", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/manuscript/#footnotes", 
            "text": "1:  http://cudmore.github.com/treadmill", 
            "title": "Footnotes"
        }, 
        {
            "location": "/manuscript/#references", 
            "text": "", 
            "title": "References"
        }, 
        {
            "location": "/about/", 
            "text": "About\n\n\ntreadmill was created by \nRobert H Cudmore\n.", 
            "title": "about"
        }, 
        {
            "location": "/about/#about", 
            "text": "treadmill was created by  Robert H Cudmore .", 
            "title": "About"
        }
    ]
}